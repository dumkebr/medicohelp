{/* ===== GESTÃO DE PACIENTES (como já está) ===== */}
<SidebarGroup>
  <div className="flex items-center justify-between pr-1">
    <SidebarGroupLabel>Gestão de Pacientes</SidebarGroupLabel>
    <Switch checked={showPatientMgmt} onCheckedChange={setShowPatientMgmt} className="scale-75 translate-y-[1px]" />
  </div>
  {showPatientMgmt && (
    <SidebarGroupContent className="space-y-1">
      <Link href="/novo-paciente" className="block">Novo paciente</Link>
      <Link href="/pacientes" className="block">Todos os pacientes</Link>
    </SidebarGroupContent>
  )}
</SidebarGroup>

{/* ===== ATENDIMENTOS SALVOS (EM CIMA) ===== */}
<SidebarGroup>
  <div className="flex items-center justify-between pr-1">
    <SidebarGroupLabel>Atendimentos Salvos</SidebarGroupLabel>
    <Switch checked={showSaved} onCheckedChange={setShowSaved} className="scale-75 translate-y-[1px]" />
  </div>

  {showSaved && (
    <SidebarGroupContent className="space-y-2">
      <div className="max-h-[22vh] overflow-auto divide-y rounded border">
        {savedItems.length === 0 && (
          <div className="p-2 text-neutral-500 text-xs">Nenhum salvo ainda.</div>
        )}
        {savedItems.map((it) => (
          <ItemRow
            key={it.id}
            item={it}
            isActive={current === it.id}
            onOpen={() => openAt(it.id)}
            onDelete={(e)=>{ e.stopPropagation(); removeAtendimento(it.id); setItems(listAtendimentos()); setCurrent(getCurrentId()); }}
            refresh={()=>{ setItems(listAtendimentos()); }}
          />
        ))}
      </div>
    </SidebarGroupContent>
  )}
</SidebarGroup>

{/* ===== HISTÓRICO (EMBAIXO) ===== */}
<SidebarGroup>
  <div className="flex items-center justify-between">
    <SidebarGroupLabel>Histórico</SidebarGroupLabel>
    <button onClick={novoAt} className="text-xs px-2 py-0.5 border rounded">Novo</button>
  </div>
  <SidebarGroupContent className="space-y-2">
    <div className="max-h-[22vh] overflow-auto divide-y rounded border">
      {volatileItems.length === 0 && (
        <div className="p-2 text-neutral-500 text-xs">Sem históricos recentes.</div>
      )}
      {volatileItems.map((it) => (
        <ItemRow
          key={it.id}
          item={it}
          isActive={current === it.id}
          onOpen={() => openAt(it.id)}
          onDelete={(e)=>{ e.stopPropagation(); removeAtendimento(it.id); setItems(listAtendimentos()); setCurrent(getCurrentId()); }}
          refresh={()=>{ setItems(listAtendimentos()); }}
        />
      ))}
    </div>
  </SidebarGroupContent>
</SidebarGroup>
