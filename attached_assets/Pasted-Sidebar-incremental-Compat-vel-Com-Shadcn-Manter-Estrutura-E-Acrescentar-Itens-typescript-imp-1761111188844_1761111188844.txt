Sidebar (incremental, Compatível Com Shadcn) — Manter Estrutura E Acrescentar Itens
· typescript
import React, { useState } from "react";
            </div>
          </CollapsibleContent>
        </Collapsible>


        {/* HISTÓRICO — SEM BOTÃO NOVO; COM CHAVE */}
        <Collapsible open={openHistory} onOpenChange={setOpenHistory} className="mb-2">
          <div className="flex items-center justify-between px-2">
            <div className="text-sm font-semibold">Histórico de atendimentos</div>
            <CollapsibleTrigger asChild>
              <Button variant="ghost" size="icon" className="h-8 w-8">
                {openHistory ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
              </Button>
            </CollapsibleTrigger>
          </div>
          <CollapsibleContent>
            <div className="px-2 mt-2 space-y-1">
              {history.length === 0 && (
                <div className="text-xs text-muted-foreground px-1">Sem histórico por enquanto.</div>
              )}
              {history.map((v) => (
                <Button key={v.id} variant="ghost" className="w-full justify-between h-auto py-2 px-3">
                  <div>
                    <div className="text-sm font-medium leading-tight">{v.title}</div>
                    {v.subtitle && (
                      <div className="text-xs text-muted-foreground leading-tight">{v.subtitle}</div>
                    )}
                  </div>
                </Button>
              ))}
            </div>
          </CollapsibleContent>
        </Collapsible>
      </ScrollArea>
    </div>
  );
};


export default SidebarIncremental;


/**
 * Helper opcional: gerenciador de movimento do caso atual.
 * Uso: const m = useVisitManager(); m.newVisit({ isSaved });
 * Regra: se isSaved === true -> empurra para Salvos; caso contrário -> Histórico.
 */
export function useVisitManager() {
  const [currentCase, setCurrentCase] = useState<{ id: string; title: string; subtitle?: string } | null>(null);
  const [saved, setSaved] = useState<Visit[]>([]);
  const [history, setHistory] = useState<Visit[]>([]);


  function newVisit(opts?: { isSaved?: boolean }) {
    if (currentCase) {
      if (opts?.isSaved) {
        setSaved((arr) => [{ id: currentCase.id, title: currentCase.title, subtitle: currentCase.subtitle }, ...arr]);
      } else {
        setHistory((arr) => [{ id: currentCase.id, title: currentCase.title, subtitle: currentCase.subtitle }, ...arr]);
      }
    }
    // inicia um novo caso em branco
    const nid = "v_" + Math.random().toString(36).slice(2, 8);
    setCurrentCase({ id: nid, title: "Novo atendimento", subtitle: new Date().toLocaleString() });
  }


  return { currentCase, setCurrentCase, saved, history, newVisit };
}



Show! Tirei a galeria fora e já deixei tudo pronto, mantendo sua estrutura e só acrescentando o que pediu.

Tá na canvas:

Menu Principal:
Atendimento médico (igual) · Sobre (igual) · Novo atendimento (subiu pra cá) · Buscar em atendimentos (abre busca inline).

Atendimentos Salvos (com chave) acima do Histórico.

Histórico com chave (mostrar/ocultar) e sem botão Novo.

E inclui um helper pronto pra sua regra do “Novo atendimento”:

useVisitManager() com newVisit({ isSaved }):

isSaved: true → empurra o caso atual para Salvos.

sem isSaved → empurra para Histórico.

depois inicia um caso novo.

Como plugar rapidinho

Crie src/components/SidebarIncremental.tsx e cole o código da canvas.

Garanta os imports do shadcn (button, input, collapsible, separator, scroll-area) e:

npm i lucide-react


No seu layout:

import SidebarIncremental, { useVisitManager } from "@/components/SidebarIncremental";

export default function App() {
  const vm = useVisitManager();

  return (
    <div className="h-screen grid grid-cols-[320px_1fr]">
      <SidebarIncremental
        onGoToClinical={() => router.push("/clinico")}
        onGoToAbout={() => router.push("/sobre")}
        onNewVisit={() => vm.newVisit({ /* passe isSaved=true se o médico clicou salvar */ })}
        onSearchQuery={(q) => console.log("Buscar:", q)}
        saved={vm.saved}
        history={vm.history}
        patients={[{ id: "p1", name: "Maria Souza", extra: "G2P1" }]}
      />
      <main className="p-6">
        {/* sua área do clínico; quando o médico clicar em “Salvar”, chame vm.newVisit({ isSaved: true }) */}
      </main>
    </div>
  );
}