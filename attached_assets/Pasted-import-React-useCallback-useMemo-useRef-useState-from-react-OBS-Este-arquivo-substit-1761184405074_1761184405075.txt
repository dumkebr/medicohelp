import React, { useCallback, useMemo, useRef, useState } from "react";
// OBS: Este arquivo substitui client/src/pages/atendimento.tsx
// Objetivo: Respostas no MODO CL√çNICO iguais ao estilo do Clairton: diretas, pr√°ticas e com racioc√≠nio m√©dico real.
// Tamb√©m torna o MODO EXPLICA√á√ÉO + EVID√äNCIAS mais humano (sem tom de guideline engessado), mantendo refer√™ncias quando existirem.

// Se voc√™ usa um componente de abas/controles no topo, mantenha:
// import { TopControls } from "@/components/TopControls"; // (ajuste o caminho se necess√°rio)

// Caso n√£o exista, comente a linha acima e use a barra simples definida aqui.

// ========================= UTILIDADES =========================

type Mode = "clinico" | "explicativo";

const SECTION = {
  DX: "ü©∫ Diagn√≥stico prov√°vel",
  CONDUTA: "‚ö° Conduta imediata",
  EXAMES: "üß™ Investiga√ß√£o complementar",
  ALERTAS: "üí¨ Observa√ß√µes / alertas",
} as const;

const join = (arr: (string | undefined | null)[]) => arr.filter(Boolean).join("\n");

const hasAny = (text: string, keys: string[]) => keys.some(k => text.includes(k));

const norm = (s: string) =>
  s
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "");

// ===================== DETEC√á√ÉO DE CEN√ÅRIOS =====================

interface Reply {
  title?: string;
  body: string;
}

function needsVitals(userText: string) {
  const t = norm(userText);
  const lacksPA = !/(\bpa\b|pressao|mmhg)/.test(t);
  const lacksFC = !/(\bfc\b|frequencia cardiaca|batimento)/.test(t);
  const lacksSat = !/(satur(a|)cao|sat\b|o2|oxigen)/.test(t);
  const lacksT = !/(\bt\b|temperatura|febre)/.test(t);
  return { lacksPA, lacksFC, lacksSat, lacksT };
}

function vitalPrompt(userText: string): string | undefined {
  const v = needsVitals(userText);
  const ask: string[] = [];
  if (v.lacksPA) ask.push("PA (mmHg)");
  if (v.lacksFC) ask.push("FC (bpm)");
  if (v.lacksSat) ask.push("Satura√ß√£o (%)");
  if (v.lacksT) ask.push("Temperatura (¬∞C)");
  if (ask.length === 0) return undefined;
  return `Me passa ${ask.join(", ")} pra eu ajustar dose/conduta com seguran√ßa.`;
}

function baseFrame(dx: string[], conduta: string[], exames: string[], alertas: string[]): string {
  return [
    `**${SECTION.DX}:**\n${dx.map((i, idx) => `${idx + 1}. ${i}`).join("\n")}`,
    `**${SECTION.CONDUTA}:**\n${conduta.map((i, idx) => `${idx + 1}. ${i}`).join("\n")}`,
    `**${SECTION.EXAMES}:**\n${exames.map((i, idx) => `${idx + 1}. ${i}`).join("\n")}`,
    alertas.length
      ? `**${SECTION.ALERTAS}:**\n${alertas.map((i, idx) => `${idx + 1}. ${i}`).join("\n")}`
      : "",
  ]
    .filter(Boolean)
    .join("\n\n");
}

// ---------- IAM / Dor tor√°cica ----------
function handleACS(text: string): Reply {
  const t = norm(text);
  const inferior = hasAny(t, ["d2", "d3", "avf", "parede inferior", "iam inferior"]);
  const suspeitaVD = inferior; // por padr√£o, lembrar de VD em IAM inferior
  const dx = [
    inferior
      ? "IAM com supra de ST em parede inferior (D2, D3, aVF)."
      : "SCA ‚Äî avaliar ECG para STEMI/NSTEMI e diagn√≥sticos diferenciais.",
  ];

  const conduta = [
    "Monitoriza√ß√£o, acesso venoso, analgesia. O‚ÇÇ se Sat < 94%.",
    "AAS 300 mg VO mastigado (se n√£o usou antes).",
    "Segundo antiplaquet√°rio: Clopidogrel 300‚Äì600 mg VO ou Ticagrelor 180 mg VO.",
    "Anticoagula√ß√£o: Heparina n√£o fracionada 60 U/kg EV (m√°x 4.000 U) ou Enoxaparina 1 mg/kg SC.",
    suspeitaVD
      ? "‚ö†Ô∏è Evita nitrato at√© excluir infarto de VD (fazer deriva√ß√µes direitas V3R‚ÄìV4R)."
      : "Nitrato SL se dor e PA > 100x60, sem sinais de choque/VD.",
    "Morfina 2‚Äì4 mg EV se dor refrat√°ria (cautela em hipotens√£o).",
    "Atorvastatina 80 mg VO o quanto antes.",
    "Acionar hemodin√¢mica para angioplastia prim√°ria (ideal < 120 min). Se indispon√≠vel, considerar tromb√≥lise conforme protocolo local.",
  ];

  const exames = [
    "ECG seriado a cada 15‚Äì30 min.",
    "Troponina/CK-MB, hemograma, eletr√≥litos, fun√ß√£o renal, glicemia.",
    "RX t√≥rax conforme quadro.",
  ];

  const alertas = [
    "Se suspeita de VD: evitar nitrato e usar volume (SF 0,9% 300‚Äì500 mL) se hipotenso.",
    "Bradicardia/bloqueio AV em inferior: avaliar atropina se repercuss√£o.",
  ];

  const ask = vitalPrompt(text);
  if (ask) alertas.unshift(ask);
  return { title: "SCA / IAM", body: baseFrame(dx, conduta, exames, alertas) };
}

// ---------- Crise convulsiva ----------
function handleSeizure(text: string): Reply {
  const dx = [
    "Crise convulsiva ativa ou p√≥s-ictal ‚Äî estabilizar via a√©rea, ventila√ß√£o e circula√ß√£o.",
  ];
  const conduta = [
    "Monitoriza√ß√£o, acesso venoso, prote√ß√£o de vias a√©reas.",
    "Glicemia capilar ‚Äî se <60 mg/dL: glicose EV conforme protocolo.",
    "Benzodiazep√≠nico: Diazepam 0,15‚Äì0,2 mg/kg EV (m√°x 10 mg) ou Midazolam 10 mg IM/IN se sem acesso.",
    "Se persistir >5 min: repetir; considerar Levetiracetam / Valproato / Fenito√≠na conforme disponibilidade.",
  ];
  const exames = [
    "Eletrolitos, fun√ß√£o renal/hep√°tica, hemograma, toxicol√≥gico conforme suspeita.",
    "TC de cr√¢nio se primeira crise, d√©ficit focal, trauma, uso de anticoagulante, febre alta, imunossupress√£o.",
  ];
  const alertas = [
    "Investigar infec√ß√£o SNC, abstin√™ncia, erro de dose, gesta√ß√£o (ecl√¢mpsia).",
  ];
  const ask = vitalPrompt(text);
  if (ask) alertas.unshift(ask);
  return { title: "Crise convulsiva", body: baseFrame(dx, conduta, exames, alertas) };
}

// ---------- AVC / D√©ficit neurol√≥gico s√∫bito ----------
function handleStroke(text: string): Reply {
  const dx = ["AVC isqu√™mico vs hemorr√°gico ‚Äî tempo de in√≠cio define janela terap√™utica."];
  const conduta = [
    "Escala NIHSS, glicemia capilar, PA e SatO‚ÇÇ (O‚ÇÇ se Sat <94%).",
    "TC de cr√¢nio sem contraste imediata.",
    "Se janela e crit√©rios: tromb√≥lise sist√™mica / trombectomia mec√¢nica conforme protocolo.",
    "PA alvo: n√£o reduzir agressivo antes de definir conduta (salvo emerg√™ncia hipertensiva).",
  ];
  const exames = [
    "TC/angio-TC, hemograma, coagulograma, eletr√≥litos, fun√ß√£o renal, ECG.",
  ];
  const alertas = ["Exclus√£o de hipoglicemia √© priorit√°ria."];
  const ask = vitalPrompt(text);
  if (ask) alertas.unshift(ask);
  return { title: "AVC / D√©ficit focal", body: baseFrame(dx, conduta, exames, alertas) };
}

// ---------- Sepse / Choque s√©ptico ----------
function handleSepsis(text: string): Reply {
  const dx = ["Sepse ‚Äî infec√ß√£o suspeita/provada com disfun√ß√£o org√¢nica."];
  const conduta = [
    "Coletar culturas rapidamente e iniciar antibi√≥tico emp√≠rico amplo conforme foco.",
    "Reposi√ß√£o vol√™mica 30 mL/kg de cristal√≥ide nas primeiras 3 h se hipotens√£o/lactato alto.",
    "Vasopressor (noradrenalina) se refrat√°rio a volume para MAP ‚â•65 mmHg.",
  ];
  const exames = [
    "Lactato, hemograma, fun√ß√£o renal/hep√°tica, eletr√≥litos, gasometria, coagulograma.",
    "Imagem conforme foco (RX t√≥rax, US, TC).",
  ];
  const alertas = ["Reavaliar perfus√£o, diurese, necessidade de UTI."];
  const ask = vitalPrompt(text);
  if (ask) alertas.unshift(ask);
  return { title: "Sepse", body: baseFrame(dx, conduta, exames, alertas) };
}

// ---------- Obstetr√≠cia (gestante) ----------
function handleOb(text: string): Reply {
  const t = norm(text);
  const preeclampsia = hasAny(t, ["pre eclampsia", "preeclampsia", "ip uterino", "rastr pre eclampsia"]);
  const dx = [
    preeclampsia ? "Gestante ‚Äì suspeita/diagn√≥stico de pr√©‚Äëecl√¢mpsia." : "Gestante ‚Äì avaliar risco materno‚Äëfetal e queixa principal.",
  ];
  const conduta = [
    "PA seriada, protein√∫ria, avalia√ß√£o de sinais de gravidade.",
    preeclampsia ? "Se grave: sulfata√ß√£o (MgSO4) e controle press√≥rico (hidralazina/labetalol conforme protocolo)." : "Conduta conforme quadro (trabalho de parto, infec√ß√£o urin√°ria, sangramento, etc.).",
    "Avaliar necessidade de encaminhamento ao alto risco / maternidade de refer√™ncia.",
  ];
  const exames = [
    "EAS/urocultura se sintomas urin√°rios, beta‚ÄëhCG conforme IG, US obst√©trico/Doppler quando indicado.",
  ];
  const alertas = [
    "Evitar medicamentos contraindicados na gesta√ß√£o.",
    "Sempre documentar IG, movimentos fetais, sangramento, dor, atividade uterina.",
  ];
  const ask = vitalPrompt(text);
  if (ask) alertas.unshift(ask);
  return { title: "Gestante", body: baseFrame(dx, conduta, exames, alertas) };
}

// ---------- Pediatria ‚Äì Febre / Quadro infeccioso comum ----------
function handlePeds(text: string): Reply {
  const dx = ["Pediatria ‚Äì s√≠ndrome febril. Avaliar foco (vias a√©reas, urin√°rio, GI, pele)."];
  const conduta = [
    "Hidratar, antit√©rmico conforme peso. Avaliar sinais de alarme (letargia, gem√™ncia, m√° perfus√£o, tiragem, v√¥mitos incoerc√≠veis).",
    "Se <3 meses ou toxemia: investiga√ß√£o e poss√≠vel interna√ß√£o.",
  ];
  const exames = [
    "Urina I/urocultura se sem foco claro, hemograma, RX t√≥rax se sintomas respirat√≥rios importantes.",
  ];
  const alertas = ["Reavaliar em 24‚Äì48 h ou antes se piora."];
  const ask = vitalPrompt(text);
  if (ask) alertas.unshift(ask);
  return { title: "Pediatria ‚Äì Febre", body: baseFrame(dx, conduta, exames, alertas) };
}

// ---------- Fallback ‚Äì Resposta m√©dica geral ----------
function handleGeneric(text: string): Reply {
  const dx = ["Quadro cl√≠nico informado ‚Äì vou te guiar de forma pr√°tica agora mesmo."];
  const conduta = [
    "Primeiro: sinais vitais e exame dirigido ao principal sintoma.",
    "Al√≠vio de sintomas imediato quando seguro.",
    "Depois: investiga√ß√£o objetiva e conduta espec√≠fica conforme achados.",
  ];
  const exames = ["Selecionar exames que mudem conduta hoje. Evitar pedir por pedir."];
  const alertas: string[] = [];
  const ask = vitalPrompt(text);
  if (ask) alertas.unshift(ask);
  return { title: "Atendimento cl√≠nico", body: baseFrame(dx, conduta, exames, alertas) };
}

// Router de cen√°rios
function routeCase(userText: string): Reply {
  const t = norm(userText);

  if (hasAny(t, ["iam", "stemi", "scai", "dor toracica", "ecg", "d2", "d3", "avf", "v4r", "v3r"])) {
    return handleACS(userText);
  }
  if (hasAny(t, ["convuls", "crise", "epilep"])) {
    return handleSeizure(userText);
  }
  if (hasAny(t, ["avc", "derrame", "hemiparesia", "afasia", "nistagmo", "ataxia"])) {
    return handleStroke(userText);
  }
  if (hasAny(t, ["sepse", "choque septico", "septic", "lactato"])) {
    return handleSepsis(userText);
  }
  if (hasAny(t, ["gestante", "gravida", "obstetr", "ig ", "dpp", "pre eclampsia", "preeclampsia"])) {
    return handleOb(userText);
  }
  if (hasAny(t, ["crianca", "pediatr", "menor", "lactente", "febre"])) {
    return handlePeds(userText);
  }

  return handleGeneric(userText);
}

// ========================= UI / P√ÅGINA =========================

export default function Atendimento() {
  const [mode, setMode] = useState<Mode>("clinico");
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState<Array<{ role: "user" | "assistant"; content: string }>>([]);
  const inputRef = useRef<HTMLTextAreaElement | null>(null);

  const handleSend = useCallback(() => {
    const text = input.trim();
    if (!text) return;

    const userMsg = { role: "user" as const, content: text };

    let reply: Reply;
    if (mode === "clinico") {
      reply = routeCase(text);
    } else {
      // Modo explicativo + evid√™ncias ‚Äì mais humano, por√©m t√©cnico
      const core = routeCase(text);
      reply = {
        title: core.title,
        body:
          core.body +
          "\n\n‚Äî Explica√ß√£o r√°pida: estou priorizando condutas que mudam desfecho imediato. Se quiser, eu detalho a fisiopatologia e trago refer√™ncias pontuais (Diretrizes SBC/ILAS/ANE etc.) de forma enxuta, sem texto de guideline engessado.",
      };
    }

    setMessages(prev => [...prev, userMsg, { role: "assistant", content: reply.body }]);
    setInput("");
    inputRef.current?.focus();
  }, [input, mode]);

  const quickHints = useMemo(
    () => [
      "IAM inferior com supra em D2, D3, aVF",
      "Crian√ßa febril 10 meses, sem foco",
      "Gestante 34s com PA alta e cefaleia",
      "Paciente com crise convulsiva h√° 10 min",
      "Suspeita de sepse urin√°ria em idoso",
      "D√©ficit s√∫bito de for√ßa em MSD h√° 1h",
    ],
    []
  );

  return (
    <div className="mx-auto max-w-3xl px-4 py-6">
      {/* Top controls (substitua pelo seu componente se existir) */}
      <div className="mb-4 flex items-center justify-between gap-2">
        <div className="flex items-center gap-2">
          <button
            className={`rounded-xl px-3 py-2 text-sm font-medium shadow ${
              mode === "clinico" ? "bg-emerald-600 text-white" : "bg-gray-100"
            }`}
            onClick={() => setMode("clinico")}
          >
            Modo cl√≠nico
          </button>
          <button
            className={`rounded-xl px-3 py-2 text-sm font-medium shadow ${
              mode === "explicativo" ? "bg-emerald-600 text-white" : "bg-gray-100"
            }`}
            onClick={() => setMode("explicativo")}
          >
            Explica√ß√£o + Evid√™ncias (humano)
          </button>
        </div>
        <div className="hidden text-xs text-gray-500 md:block">Nada de floreio. Tom direto e respons√°vel. "Pede dado se faltar, n√£o inventa".</div>
      </div>

      {/* Mensagens */}
      <div className="mb-4 space-y-4">
        {messages.map((m, i) => (
          <div
            key={i}
            className={
              m.role === "user"
                ? "rounded-2xl border border-gray-200 bg-white p-3 text-gray-900"
                : "rounded-2xl border border-emerald-200 bg-emerald-50 p-3 text-gray-900"
            }
          >
            <div className="prose prose-sm max-w-none">{m.content.split("\n").map((line, k) => (<p key={k}>{line}</p>))}</div>
          </div>
        ))}
      </div>

      {/* Entrada */}
      <div className="rounded-2xl border border-gray-200 bg-white p-3 shadow-sm">
        <textarea
          ref={inputRef}
          rows={4}
          value={input}
          onChange={e => setInput(e.target.value)}
          placeholder="Descreve o caso do jeito que voc√™ falaria no plant√£o (ex.: ‚Äòto com IAM inferior com supra em D2, D3 e aVF, PA 90x60, FC 50‚Äô)."
          className="w-full resize-y rounded-xl border border-gray-200 p-3 outline-none"
        />
        <div className="mt-2 flex items-center justify-between">
          <div className="flex flex-wrap gap-2 text-xs">
            {quickHints.map((h, idx) => (
              <button
                key={idx}
                onClick={() => setInput(h)}
                className="rounded-full border border-gray-200 px-3 py-1 hover:bg-gray-50"
              >
                {h}
              </button>
            ))}
          </div>
          <button
            onClick={handleSend}
            className="rounded-xl bg-emerald-600 px-4 py-2 text-white shadow hover:bg-emerald-700"
          >
            Enviar
          </button>
        </div>
      </div>

      <div className="mt-4 text-xs text-gray-500">
        Conte√∫do de apoio cl√≠nico. Valida√ß√£o e responsabilidade: m√©dico usu√°rio. Este m√≥dulo prioriza decis√µes que mudam desfecho e pergunta
        dados essenciais quando faltarem (PA, FC, Sat, T). Nada de inventar sinal vital.
      </div>
    </div>
  );
}
